#server:
#  port: 8080
#
#spring:
#  application:
#    name: api-gateway
#  cloud:
#    gateway:
#      routes:
#        - id: user-service
#          uri: lb://user-service
#          predicates:
#            - Path=/api/users/**
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: user-service
#                fallbackUri: forward:/fallback/user-service
#            - StripPrefix=1
#            - name: RequestRateLimiter
#              args:
#                redis-rate-limiter.replenishRate: 10
#                redis-rate-limiter.burstCapacity: 20
#                redis-rate-limiter.requestedTokens: 1
#
#        - id: note-service
#          uri: lb://note-service
#          predicates:
#            - Path=/api/notes/**
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: note-service
#                fallbackUri: forward:/fallback/note-service
#            - StripPrefix=1
#            - JwtFilter
#
#        - id: auth-service
#          uri: lb://auth-service
#          predicates:
#            - Path=/api/auth/**
#          filters:
#            - StripPrefix=1
#
#      server:
#        webflux:
#          discovery:
#            locator:
#              enabled: true
#          httpclient:
#            connect-timeout: 1000
#            response-timeout: 5s
#
#    circuitbreaker:
#      resilience4j:
#        instances:
#          user-service:
#            register-health-indicator: true
#            failure-rate-threshold: 50
#            minimum-number-of-calls: 5
#            automatic-transition-from-open-to-half-open-enabled: true
#            wait-duration-in-open-state: 10s
#            permitted-number-of-calls-in-half-open-state: 3
#            sliding-window-size: 10
#            sliding-window-type: COUNT_BASED
#
#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: http://auth-service:8082
#          jwk-set-uri: http://auth-service:8082/oauth2/jwks
#
#  data:
#    redis:
#      host: redis
#      port: 6379
#
#eureka:
#  client:
#    service-url:
#      defaultZone: http://admin:admin123@eureka-server:8761/eureka/
#    register-with-eureka: true
#    fetch-registry: true
#  instance:
#    prefer-ip-address: true
#    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
#
#management:
#  endpoints:
#    web:
#      exposure:
#        include: health, info, gateway
#  endpoint:
#    health:
#      show-details: always
#
#logging:
#  level:
#    org.springframework.cloud.gateway: DEBUG
#    reactor.netty: DEBUG

server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      server:
        webflux:
          discovery:
            locator:
              enabled: true

eureka:
  client:
    service-url:
      defaultZone: http://shinnn:12345@localhost:8761/eureka/